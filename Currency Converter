Currency Converter Web App: Technical Architecture

1. Overview

This architecture describes a client-side web application for converting between global currencies using real-time exchange rates. It is a single-page, responsive app built with vanilla HTML, CSS, and JavaScript, and it relies on an external public API (exchangerate.host).

2. Components

graph TD
  A[User Browser] -->|1. HTML/CSS/JS| B[UI Layer]
  B -->|2. REST request| C[API Layer]
  C -->|3. JSON response| B
  B -->|4. Display result| A

User Browser: The client environment (desktop or mobile) running the HTML page.

UI Layer:

HTML Structure defines form controls (amount input, currency selectors, buttons).

CSS handles responsive layout, spacing, typography, and theming.

JavaScript binds event handlers and orchestrates network calls and DOM updates.

API Layer (exchangerate.host):

Public REST endpoints:

/symbols to fetch a list of currency codes and descriptions.

/convert?from=XXX&to=YYY&amount=Z to perform real-time conversion.

Data Flow:

On load, JS requests symbols and populates dropdowns.

On user action (Convert), JS fetches /convert with parameters.

API returns JSON: {result: 123.45}.

JS updates the UI, showing conversion result.

3. Layers & Responsibilities

Layer

Technology

Responsibility

Presentation

HTML5, CSS3

Markup, styling, responsive layout, accessibility

Interaction

JavaScript (ES6)

Event handling, Fetch API calls, input validation

Data Integration

Public REST API

Currency symbols & conversion endpoints

4. Key Design Considerations

Client‑Only Architecture: No backend server needed—simplifies deployment (just host static files).

Responsiveness: CSS media queries ensure usability on mobile & desktop.

Real‑Time Data: Reliance on a reliable, free public API minimizes maintenance overhead.

Graceful Error Handling: JS checks for invalid input & failed network responses.

Extensibility: Can be extended to include historical charts, offline caching, or server‑side proxy.

5. Optional Enhancements

Historical Rates Chart: Integrate Chart.js, fetch /timeseries endpoint.

Currency Swap: Add a button to swap from and to currencies.

Local Storage: Persist last-used currencies & amount.

Theming: Light/dark mode toggle with CSS variables.

End of Architecture Document

